CrossTable(df$zerbaxa, df$avycaz)
library(gmodels)
CrossTable(df$zerbaxa, df$avycaz)
unique(df$zerbaxa)
unique(df$avycaz)
df = read.table(file ='clipboard', as.is = TRUE, header = TRUE)
df$zerbaxa = lower(df$zerbaxa)
df$avycaz = lower(df$avycaz)
df = read.table(file ='clipboard', as.is = TRUE, header = TRUE)
df$zerbaxa = lower(df$zerbaxa)
df$avycaz = lower(df$avycaz)
CrossTable(df$zerbaxa, df$avycaz)
df$zerbaxa = tolower(df$zerbaxa)
df$avycaz = tolower(df$avycaz)
CrossTable(df$zerbaxa, df$avycaz)
CrossTable(df$zerbaxa, df$avycaz, chisq = TRUE)
CrossTable(df$zerbaxa, df$avycaz, chisq = TRUE, format = 'SSPS')
CrossTable(df$zerbaxa, df$avycaz, chisq = TRUE, format = 'SPSS')
CrossTable(df$zerbaxa, df$avycaz, chisq = TRUE, format = 'SPSS', digits = 3)
CrossTable(df$zerbaxa, df$avycaz, chisq = TRUE, format = 'SPSS', digits = 2)
CrossTable(df$zerbaxa, df$avycaz, chisq = TRUE, format = 'SPSS', digits = 2, dnn = c('C/T', 'C/A'))
df = read.table(file ='clipboard', as.is = TRUE, header = TRUE)
df$zerbaxa = toupper(df$zerbaxa)
df$avycaz = toupper(df$avycaz)
CrossTable(df$zerbaxa, df$avycaz, chisq = TRUE, format = 'SPSS', digits = 2, dnn = c('C/T', 'C/A'))
CrossTable(df$zerbaxa, df$avycaz, chisq = TRUE, format = 'SPSS',
digits = 2, dnn = c('C/T', 'C/A'), prop.chisq = FALSE)
library(gmodels)
df = read.table(file ='clipboard', as.is = TRUE, header = TRUE)
df$zerbaxa = toupper(df$zerbaxa)
df$avycaz = toupper(df$avycaz)
CrossTable(df$zerbaxa, df$avycaz, chisq = TRUE, format = 'SPSS',
digits = 2, dnn = c('C/T', 'C/A'), prop.chisq = FALSE)
library(gmodels)
df = read.table(file = 'clipboard', as.is = TRUE, header = TRUE)
CrossTable(df$fail, df$interp)
CrossTable(df$fail, df$interp, chisq = TRUE)
CrossTable(df$fail, df$interp, chisq = TRUE, prop.chisq = FALSE)
CrossTable(df$interp, df$fail, chisq = TRUE, prop.chisq = FALSE)
library(gmodels)
df = read.table(file = 'clipboard', as.is = TRUE, header = TRUE)
CrossTable(df$interp, df$fail, chisq = TRUE, prop.chisq = FALSE)
0.375 / 0.159
CrossTable(df$interp, df$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SAS')
CrossTable(df$interp, df$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SSPS')
CrossTable(df$interp, df$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS')
CrossTable(df$interp, df$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
library(gmodels)
df = read.table(file = 'clipboard', as.is = TRUE, header = TRUE)
df$interp = ifelse(df$max_gt_hundred > 1, 'NS', 'S')
CrossTable(df$interp, df$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
df$interp = ifelse(df$max_interp > 1, 'NS', 'S')
CrossTable(df$interp, df$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
x = df[df$next_is_not_quin in c('NULL', 1)]
x = df[df$next_is_not_quin %in%  c('NULL', 1),]
View(x)
y = df[df$next_is_not_quin %in%  c('NULL', 0),]
z = df
CrossTable(x$interp, x$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
CrossTable(y$interp, y$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
CrossTable(x$interp, x$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
CrossTable(z$interp, z$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
CrossTable(x$interp, x$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
CrossTable(y$interp, y$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
CrossTable(x$interp, x$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
CrossTable(y$interp, y$fail, chisq = TRUE, prop.chisq = FALSE, format = 'SPSS', dnn = c("Interpretation", "Failure"))
install.packages('qcc')
library(qcc)
data(pistonrings)
View(pistonrings)
attach(pistonrings)
diameter <- qcc.groups(diameter, sample)
View(diameter)
diameter <- qcc.groups(diameter, sample)
q <- cusum(diameter[1:25,], decision.interval = 4, se.shift = 1)
summary(q)
q <- cusum(diameter[1:25,], newdata=diameter[26:40,])
summary(q)
plot(q, chart.all=FALSE)
detach(pistonrings)
data(pistonrings)
attach(pistonrings)
diameter <- qcc.groups(diameter, sample)
q <- cusum(diameter[1:25,], decision.interval = 3, se.shift = 1)
summary(q)
q <- cusum(diameter[1:25,], newdata=diameter[26:40,])
summary(q)
plot(q, chart.all=FALSE)
detach(pistonrings)
diameter[1]
diameter[1][1]
diameter[1][2]
diameter[1,]
diameter[15,] + 10
diameter[15,] = diameter[15,] + 10
q <- cusum(diameter[1:25,], decision.interval = 3, se.shift = 1)
summary(q)
View(diameter)
library(qcc)
##
## Grouped-data
##
data(pistonrings)
attach(pistonrings)
diameter <- qcc.groups(diameter, sample)
diameter[15,] = diameter[15,] + 10
q <- cusum(diameter[1:25,], decision.interval = 3, se.shift = 1)
summary(q)
q <- cusum(diameter[1:25,], newdata=diameter[26:40,])
summary(q)
plot(q, chart.all=FALSE)
detach(pistonrings)
cause.and.effect(cause=list(Measurements=c("Micrometers", "Microscopes", "Inspectors"),
Materials=c("Alloys", "Lubricants", "Suppliers"),
Personnel=c("Shifts", "Supervisors", "Training", "Operators"),
Environment=c("Condensation", "Moisture"),
Methods=c("Brake", "Engager", "Angle"),
Machines=c("Speed", "Lathes", "Bits", "Sockets")),
effect="Surface Flaws")
df = read.table(file = 'clipboard', header = TRUE)
q <- cusum(df$rate, decision.interval = 4, se.shift = 1)
View(df)
q <- cusum(df$rate, decision.interval = 4, se.shift = 0)
q <- cusum(df$rate, decision.interval = 4, se.shift = 2)
q <- cusum(df$rate, decision.interval = 4, se.shift = 1)
q <- cusum(df$rate, decision.interval = 4, se.shift = 2)
install.packages("TTR")
library(TTR)
library(TTR)
runMean(df$rate, 2)
runMean(df$rate, 3)
runMean(df$rate, 2)
x = runMean(df$rate, 2)
x
plot(x)
plot(x, type = 'line')
ma_two = runMean(df$rate, 2)
max = max(df)
df$period[ma_two > max * 0.8 & ma_two < max * 1.2]
df$period[ma_two > max * 0.8 & ma_two < max * 1.2 & is.na(ma_two) == FALSE]
df = read.table(file = 'clipboard', header = TRUE)
df = read.table(file = 'clipboard', header = TRUE)
ma_two = runMean(df$rate, 2)
max = max(df)
ma_two
df$period[ma_two > max * 0.8 & ma_two < max * 1.2 & is.na(ma_two) == FALSE]
max = max(df[df$rate < sd(df$rate) * 3])
sd(df$rate)
mean(df$rate) + sd(df$rate) * 3
max = max(df[df$rate < mean(df$rate) + sd(df$rate) * 3])
max = max(df$rate[df$rate < mean(df$rate) + sd(df$rate) * 3])
ma_two
df$period[ma_two > max * 0.8 & ma_two < max * 1.2 & is.na(ma_two) == FALSE]
library(tsoutliers)
site_df = df[order(df$period), ]
dat.ts<- ts(site_df$rate,frequency=1)
data.ts.outliers <- tso(dat.ts)
data.ts.outliers$type
site_df[1]
site_df[[1]]
site_df[1,1]
site_df[1,2]
site_df[1,2] = 4
dat.ts<- ts(site_df$rate,frequency=1)
data.ts.outliers <- tso(dat.ts)
data.ts.outliers$type
data.ts.outliers$outliers
df
site_df = df[order(df$period), ]
site_df[1,2] = 4
dat.ts<- ts(site_df$rate,frequency=1)
data.ts.outliers <- tso(dat.ts)
data.ts.outliers$outliers
df
site_df$rate[2]
site_df$rate[2] = 2
site_df
dat.ts<- ts(site_df$rate,frequency=1)
data.ts.outliers <- tso(dat.ts)
data.ts.outliers$outliers
library("ggplot2")
library("tsoutliers")
df = read.table(file='clipboard', header = TRUE, as.is = TRUE)
df$date = as.Date(df$date)
df$date = as.Date(paste0(df$year, '-', df$month, '-01'))
outliers = data.frame(site = NA, type = NA, ind = NA, time = NA, coefhat = NA, tstat = NA)
sites = unique(df$site_tk)[1:100]
df = read.table(file='clipboard', header = TRUE, as.is = TRUE)
df$date = as.Date(paste0(df$year, '-', df$month, '-01'))
outliers = data.frame(site = NA, type = NA, ind = NA, time = NA, coefhat = NA, tstat = NA)
sites = unique(df$site_tk)[1:100]
sites = unique(df$site_tk)
df$rate = df$alarms / df$admits
for(site in sites){
site_df = df[df$site_tk == site,]
site_df = site_df[order(site_df$date), ]
dat.ts<- ts(site_df$rate,frequency=1)
data.ts.outliers <- tso(dat.ts)
if(nrow(data.ts.outliers$outliers) != 0){
temp_out = cbind(site, data.ts.outliers$outliers)
outliers = rbind(outliers, temp_out)
p = ggplot(site_df, aes(x = date, y = rate))
print(p + geom_line() + ggtitle(site))
}
}
View(outliers)
install.packages("changepoint")
library(changepoint)
df = read.table(file = 'clipboard', as.is = TRUE, header = TRUE)
df$rate = df$num / df$denom
library(changepoint)
mvalue = cpt.mean(df$rate, method = 'PELT')
cpts(mvalue)
vvalue = cpt.var(diff(df$rate), method = 'PELT')
plot(vvalue)
cpts(vvalue)
View(df)
mmvalue
vvalue
View(df)
diff(df$rate)
plot(df$rate)
plot(df$rate, type = 'line')
df = read.table(file = 'clipboard', as.is = TRUE, header = TRUE)
df = read.table(file = 'clipboard', as.is = TRUE, header = TRUE)
df$rate = df$num / df$denom
vvalue = cpt.var(diff(df$rate), method = 'PELT')
cpts(vvalue)
diff(df$rate)
plot(df$rate, type = 'line')
plot(vvalue)
plot(df$rate)
diff(df$rate)
plot(vvalue)
diff(df$rate)
cpts(vvalue)
plot(vvalue)
diff(df$rate)
plot(df$rate)
plot(vvalue)
plot(vvalue)
par(mfrow=c(2,1))
plot(df$rate)
plot(vvalue)
library(dplyr)
df = read.table('clipboard', as.is=TRUE, header=TRUE)
df = read.table('clipboard', as.is=TRUE, header=TRUE)
df = read.table('clipboard', sep='/t', as.is=TRUE, header=TRUE)
df = read.table('clipboard', sep='\t', as.is=TRUE, header=TRUE)
getwd()
setwd("C:/Users/807794/Google Drive/kaggle_home")
library( MASS)
setwd("C:/Users/807794/Google Drive/kaggle_home")
df = read.csv('train.csv', header=TRUE, as.is=TRUE)
df
c('OverallQual',
'YearBuilt',
'YearRemodAdd',
'TotalBsmtSF',
'1stFlrSF',
'GrLivArea',
'FullBath',
'TotRmsAbvGrd',
'GarageCars',
'GarageArea')
df[num_cols]
num_cols = c('OverallQual',
'YearBuilt',
'YearRemodAdd',
'TotalBsmtSF',
'1stFlrSF',
'GrLivArea',
'FullBath',
'TotRmsAbvGrd',
'GarageCars',
'GarageArea')
df[num_cols]
df[,num_cols]
library(dpluyr)
library(dplyr)
?select
d = select(df, num_cols)
df_nums = df[, colnames(df) %in% df]
df_nums = df[, colnames(df) %in% num_cols]
num_cols = c('OverallQual',
'YearBuilt',
'YearRemodAdd',
'TotalBsmtSF',
'1stFlrSF',
'GrLivArea',
'FullBath',
'TotRmsAbvGrd',
'GarageCars',
'GarageArea'
'SalePrice')
num_cols = c('OverallQual',
'YearBuilt',
'YearRemodAdd',
'TotalBsmtSF',
'1stFlrSF',
'GrLivArea',
'FullBath',
'TotRmsAbvGrd',
'GarageCars',
'GarageArea'
'SalePrice')
df_nums = df[, colnames(df) %in% num_cols]
df = read.csv('train.csv', header=TRUE, as.is=TRUE)
num_cols = c('OverallQual',
'YearBuilt',
'YearRemodAdd',
'TotalBsmtSF',
'1stFlrSF',
'GrLivArea',
'FullBath',
'TotRmsAbvGrd',
'GarageCars',
'GarageArea',
'SalePrice')
df_nums = df[, colnames(df) %in% num_cols]
step = stepAIC( df_nums, direction =" both")
house = lm(SalePrice ~ OverallQual+
YearBuilt+
YearRemodAdd+
TotalBsmtSF+
1stFlrSF+
GrLivArea+
FullBath+
TotRmsAbvGrd+
GarageCars+
GarageArea+
SalePrice+ data=df+ na.action = na.omit)
step = stepAIC(house, direction =" both")
house = lm(SalePrice ~ OverallQual+
YearBuilt+
YearRemodAdd+
TotalBsmtSF+
1stFlrSF+
GrLivArea+
FullBath+
TotRmsAbvGrd+
GarageCars+
GarageArea+
SalePrice+ data=df, na.action = na.omit)
house = lm(SalePrice ~ OverallQual+
YearBuilt+
YearRemodAdd+
TotalBsmtSF+
1stFlrSF+
GrLivArea+
FullBath+
TotRmsAbvGrd+
GarageCars+
GarageArea+
SalePrice, data=df, na.action = na.omit)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF +
1stFlrSF + GrLivArea + FullBath + TotRmsAbvGrd +
GarageCars + GarageArea + SalePrice,
data=df, na.action = na.omit)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF +
1stFlrSF + GrLivArea + FullBath + TotRmsAbvGrd +
GarageCars + GarageArea + SalePrice, data=df, na.action = na.omit)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + 1stFlrSF + GrLivArea + FullBath + TotRmsAbvGrd + GarageCars + GarageArea + SalePrice, data=df, na.action = na.omit)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + 1stFlrSF + GrLivArea + FullBath + TotRmsAbvGrd + GarageCars + GarageArea, data=df, na.action = na.omit)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + 'TotalBsmtSF' + '1stFlrSF' + GrLivArea + FullBath + TotRmsAbvGrd + GarageCars + GarageArea, data=df, na.action = na.omit)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + GrLivArea + FullBath + TotRmsAbvGrd + GarageCars + GarageArea, data=df, na.action = na.omit)
names(df_nums)[names(df_nums) == '1stFlrSF'] == 'FstFlrSR'
names(df_nums)[names(df_nums) == '1stFlrSF'] = 'FstFlrSR'
View(df_nums)
df_nums = df[, colnames(df) %in% num_cols]
View(df)
df = read.csv('train.csv', header=TRUE, as.is=TRUE)
num_cols = c('OverallQual',
'YearBuilt',
'YearRemodAdd',
'TotalBsmtSF',
'X1stFlrSF',
'GrLivArea',
'FullBath',
'TotRmsAbvGrd',
'GarageCars',
'GarageArea',
'SalePrice')
df_nums = df[, colnames(df) %in% num_cols]
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + X1stFlrSF + GrLivArea + FullBath + TotRmsAbvGrd + GarageCars + GarageArea, data=df, na.action = na.omit)
house
summary(housee)
summary(house)
step = stepAIC(house, direction =" both")
step = stepAIC(house, direction="both")
step = stepAIC(house, direction="both")
summary(step)
step
lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + X1stFlrSF + GrLivArea + GarageCars, data=df, na.action = na.omit)
summary(lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + X1stFlrSF + GrLivArea + GarageCars, data=df, na.action = na.omit))
summary(lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + GrLivArea + GarageCars, data=df, na.action = na.omit))
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + X1stFlrSF + GrLivArea + FullBath + TotRmsAbvGrd + GarageCars + GarageArea + HouseStyle, data=df, na.action = na.omit)
summary(house)
step = stepAIC(house, direction="both")
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + X1stFlrSF + GrLivArea + FullBath + TotRmsAbvGrd + GarageCars + GarageArea + HouseStyle + KitchenQual, data=df, na.action = na.omit)
df_nums = df[, colnames(df) %in% cols]
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + X1stFlrSF + GrLivArea + FullBath + TotRmsAbvGrd + GarageCars + GarageArea + HouseStyle + KitchenQual, data=df, na.action = na.omit)
cols = c('OverallQual',
'YearBuilt',
'YearRemodAdd',
'TotalBsmtSF',
'X1stFlrSF', # renamed on load
'GrLivArea',
'FullBath',
'TotRmsAbvGrd',
'GarageCars',
'GarageArea',
'SalePrice',
'HouseStyle',
'KitchenQual')
df_nums = df[, colnames(df) %in% cols]
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + X1stFlrSF + GrLivArea + FullBath + TotRmsAbvGrd + GarageCars + GarageArea + HouseStyle + KitchenQual, data=df, na.action = na.omit)
summary(house)
step = stepAIC(house, direction="both")
summary(step)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF + X1stFlrSF + GrLivArea + FullBath +
TotRmsAbvGrd + GarageCars + GarageArea + HouseStyle + KitchenQual, data=df, na.action = na.omit)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF +
X1stFlrSF + GrLivArea + FullBath +
TotRmsAbvGrd + GarageCars + GarageArea +
HouseStyle + KitchenQual + Neighborhood, data=df, na.action = na.omit)
step = stepAIC(house, direction="both")
summary(step)
unique(df$MoSold)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF +
X1stFlrSF + GrLivArea + FullBath +
TotRmsAbvGrd + GarageCars + GarageArea + YrSold + MoSold
HouseStyle + KitchenQual + Neighborhood, data=df, na.action = na.omit)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF +
X1stFlrSF + GrLivArea + FullBath +
TotRmsAbvGrd + GarageCars + GarageArea + YrSold + MoSold +
HouseStyle + KitchenQual + Neighborhood, data=df, na.action = na.omit)
step = stepAIC(house, direction="both")
summary(step)
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF +
X1stFlrSF + GrLivArea + FullBath +
TotRmsAbvGrd + GarageCars + GarageArea +
HouseStyle + KitchenQual + Neighborhood, data=df, na.action = na.omit)
step = stepAIC(house, direction="both")
summary(step)
unique(df$MoSold)lm
?lm
test = read.csv('test.csv', header=TRUE, as.is=TRUE)
step$call
l = lm(formula = SalePrice ~ OverallQual + YearBuilt + YearRemodAdd +
TotalBsmtSF + X1stFlrSF + GrLivArea + GarageCars + HouseStyle +
KitchenQual + Neighborhood, data = df, na.action = na.omit)
?predict
predict(object = lm, test)
predict(object = l, test)
res = predict(object = l, test)
house = lm(SalePrice ~ ., data=df, na.action = na.omit)
l$coefficients
house = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF +
X1stFlrSF + GrLivArea + FullBath +
TotRmsAbvGrd + GarageCars + GarageArea +
HouseStyle + KitchenQual, data=df, na.action = na.omit)
step = stepAIC(house, direction="both")
l$coefficients
l = step$call
typeof(l)
typeof(house)
typeof(df)
res = predict(object = l, test)
step$anova
step$anova[1]
step$anova[2]
step$anova[3]
step$anova[4]
step$anova[5]
step$anova[6]
step$anova$AIC
step$anova$Df
l = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF +
X1stFlrSF + GrLivArea + FullBath + GarageCars + HouseStyle +
KitchenQual, data=df, na.action = na.omit)
l$coefficients
summary(l)
l = lm(SalePrice ~ OverallQual + YearBuilt + YearRemodAdd + TotalBsmtSF +
X1stFlrSF + GrLivArea + FullBath + GarageCars +
KitchenQual, data=df, na.action = na.omit)
summary(l)
res = predict(object = l, test)
plot(res)
hist(res)
?se
sd(res)
?sd
sd(res, na.rm = TRUE)
sd(res, na.rm = FALSE)
range(1:2)
data.frame(Id=test$Id, SalePrice=res)
x = data.frame(Id=test$Id, SalePrice=res)
complete.cases(x)
median(x$SalesPrice)
median(x$SalesPrice, na.rm = TRUE)
m = median(x$SalesPrice)
m = median(x$SalesPrice,na.rm = TRUE)
m = median(as.numeric(x$SalesPrice), na.rm = TRUE)
mean(x$SalesPrice,na.rm = TRUE)
mean(x$SalesPrice,na.action=na.omit)
mean(x$SalesPrice, na.rm = TRUE)
write.csv(x, row.names=FALSE)
write.csv(x, 'sample_submit.csv', row.names=FALSE)
sd(res, na.rm = TRUE)
l
summary(l)
